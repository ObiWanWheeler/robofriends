{"version":3,"sources":["reportWebVitals.js","components/Card.jsx","components/CardList.jsx","components/Scroll.jsx","components/SearchBox.jsx","components/ErrorBoundry.jsx","containers/App.jsx","index.jsx"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Card","this","props","name","username","email","id","className","src","alt","React","Component","CardList","robots","map","robot","Scroll","style","overflowY","height","margin","children","SearchBox","type","placeholder","onChange","searchChange","ErrorBoundry","state","hasError","setState","App","OnSearchChange","event","searchField","target","value","fetch","response","json","users","length","filteredBots","filterRobots","requestedRobots","filter","toLowerCase","includes","trim","ReactDOM","render","document","getElementById"],"mappings":"qNAYeA,G,MAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,Q,kDCmBCQ,E,4JAlBX,WAAU,IAAD,EACiCC,KAAKC,MAAnCC,EADH,EACGA,KAAMC,EADT,EACSA,SAAUC,EADnB,EACmBA,MAAOC,EAD1B,EAC0BA,GAC/B,OACI,sBAAKC,UAAU,sDAAf,UACI,qBAAKC,IAAG,+BAA0BP,KAAKC,MAAMI,GAArC,YAAmDG,IAAI,cAC/D,+BACKH,EADL,IACS,uBACJH,EAFL,IAEW,uBACNC,KAEL,6BACKC,W,GAbFK,IAAMC,WCiBVC,E,4JAjBX,WACI,MACI,CAACX,KAAKC,MAAMW,OAAOC,KAAI,SAAAC,GACnB,OACI,cAAC,EAAD,CAEIT,GAAIS,EAAMT,GACVH,KAAMY,EAAMZ,KACZC,SAAUW,EAAMX,SAChBC,MAAOU,EAAMV,OAJRU,EAAMT,Y,GAPZI,IAAMC,WCUdK,E,4JATX,WACI,OACI,qBAAKC,MAAO,CAAEC,UAAW,SAAUC,OAAQ,QAASC,OAAQ,SAA5D,SACKnB,KAAKC,MAAMmB,e,GALPX,IAAMC,WCiBZW,E,4JAdX,WACI,OACI,qBAAKf,UAAU,MAAf,SACI,uBACIA,UAAU,mCACVgB,KAAK,SACLC,YAAY,gBACZC,SAAUxB,KAAKC,MAAMwB,qB,GATjBhB,IAAMC,WCmBfgB,E,kDAnBX,aAAe,IAAD,8BACV,gBACKC,MAAQ,CACTC,UAAU,GAHJ,E,qDAOd,WACI5B,KAAK6B,SAAS,CAAED,UAAU,M,oBAG9B,WACI,OAAI5B,KAAK2B,MAAMC,SACJ,kFAEJ5B,KAAKC,MAAMmB,a,GAjBCX,IAAMC,WCgElBoB,G,wDAlDX,aAAe,IAAD,8BACV,gBA4CJC,eAAiB,SAACC,GACd,EAAKH,SAAS,CAAEI,YAAaD,EAAME,OAAOC,SA5C1C,EAAKR,MAAQ,CACTf,OAAQ,GACRqB,YAAa,IAJP,E,qDAQd,WAAqB,IAAD,OAChBG,MAbe,8CAcd3C,MAAK,SAAA4C,GAAQ,OAAIA,EAASC,UAC1B7C,MAAK,SAAA8C,GAAK,OAAI,EAAKV,SAAU,CAACjB,OAAQ2B,S,oBAG3C,WAAU,IAAD,EAC2BvC,KAAK2B,MAA7Bf,EADH,EACGA,OAAQqB,EADX,EACWA,YAEhB,GAAsB,IAAlBrB,EAAO4B,OACP,OAAO,4CAGX,IAAMC,EAAezC,KAAK0C,eAE1B,OACI,sBAAKpC,UAAU,KAAf,UACI,oBAAIA,UAAU,KAAd,0BACA,cAAC,EAAD,CAAWmB,aAAczB,KAAK+B,iBAE9B,cAAC,EAAD,UACI,cAAC,EAAD,UACI,cAAC,EAAD,CAAUnB,OAAQ6B,EAAcE,gBAAiBV,a,0BAOrE,WAAgB,IAAD,EACqBjC,KAAK2B,MAA7Bf,EADG,EACHA,OAAQqB,EADL,EACKA,YAChB,OAAOrB,EAAOgC,QACV,SAAA9B,GACI,OAAOA,EAAMZ,KAAK2C,cAAcC,SAASb,EAAYc,OAAOF,sB,GA3C1DpC,IAAMC,YCLxBsC,IAASC,OACP,cAAC,EAAD,IAASC,SAASC,eAAe,SAMnC7D,M","file":"static/js/main.7b2bcdb9.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\r\n\r\nimport 'tachyons';\r\nimport './card.css';\r\n\r\n\r\nclass Card extends React.Component {\r\n    \r\n    render() {\r\n        const { name, username, email, id } = this.props;\r\n        return(\r\n            <div className=\"tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\r\n                <img src={`https://robohash.org/${this.props.id}?200x200`} alt=\"robot img\"></img>\r\n                <h2>\r\n                    {id} <br/>\r\n                    {name} <br/>\r\n                    {username}\r\n                </h2>\r\n                <h5>\r\n                    {email}\r\n                </h5>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Card;","import Card from './Card.jsx'\r\nimport React from 'react';\r\n\r\n\r\nclass CardList extends React.Component {\r\n    \r\n    render(){\r\n        return(\r\n            [this.props.robots.map(robot => {\r\n                return (\r\n                    <Card \r\n                        key={robot.id} \r\n                        id={robot.id} \r\n                        name={robot.name} \r\n                        username={robot.username} \r\n                        email={robot.email}\r\n                    />\r\n                    );\r\n            })]  \r\n        )   \r\n    }\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\n\r\nclass Scroll extends React.Component {\r\n\r\n    render() {\r\n        return (\r\n            <div style={{ overflowY: 'scroll', height: '500px', margin: '0 10%' }}>\r\n                {this.props.children}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Scroll;","import React from 'react';\r\nimport \"tachyons\";\r\n\r\n\r\nclass SearchBox extends React.Component {\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"pa2\">\r\n                <input \r\n                    className=\"pa3 ba b--green bg-lightest-blue\"\r\n                    type=\"search\" \r\n                    placeholder=\"search robots\" \r\n                    onChange={this.props.searchChange}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nclass ErrorBoundry extends React.Component {\r\n\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            hasError: false\r\n        };\r\n    }\r\n\r\n    componentDidCatch() {\r\n        this.setState({ hasError: true });\r\n    }\r\n\r\n    render() {\r\n        if (this.state.hasError) {\r\n            return <h1>Oops. Look's like something went wrong. Our bad!</h1>\r\n        }\r\n        return this.props.children;\r\n    }\r\n}\r\n\r\nexport default ErrorBoundry;","import React from 'react';\r\n\r\nimport CardList from '../components/CardList.jsx';\r\nimport Scroll from \"../components/Scroll.jsx\";\r\n\r\nimport SearchBox from '../components/SearchBox.jsx';\r\n\r\nimport ErrorBoundry from '../components/ErrorBoundry.jsx'\r\n\r\nimport \"./App.css\"\r\nimport \"tachyons\";\r\n\r\nconst robot_endpoint = \"https://jsonplaceholder.typicode.com/users\";\r\n\r\nclass App extends React.Component {\r\n\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            robots: [],\r\n            searchField: '',\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        fetch(robot_endpoint)\r\n        .then(response => response.json())\r\n        .then(users => this.setState( {robots: users }));\r\n    }\r\n\r\n    render() {\r\n        const { robots, searchField } = this.state;\r\n\r\n        if (robots.length === 0) {\r\n            return <h1>Loading...</h1>\r\n        }\r\n\r\n        const filteredBots = this.filterRobots();\r\n\r\n        return (\r\n            <div className=\"tc\">\r\n                <h1 className=\"f1\">RobotFriends</h1>\r\n                <SearchBox searchChange={this.OnSearchChange} />\r\n\r\n                <Scroll>\r\n                    <ErrorBoundry>\r\n                        <CardList robots={filteredBots} requestedRobots={searchField}/>\r\n                    </ErrorBoundry>\r\n                </Scroll>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    filterRobots() {\r\n        const { robots, searchField } = this.state;\r\n        return robots.filter(\r\n            robot => {\r\n                return robot.name.toLowerCase().includes(searchField.trim().toLowerCase());\r\n            });\r\n    }\r\n\r\n    OnSearchChange = (event) => {\r\n        this.setState({ searchField: event.target.value });\r\n    };\r\n}\r\n\r\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport 'tachyons';\nimport App from './containers/App.jsx'\n\n\n\nReactDOM.render(\n  <App />, document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}